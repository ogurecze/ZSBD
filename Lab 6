-- 1. Dodawanie wiersza do tabeli Jobs
CREATE OR REPLACE PROCEDURE add_job(
    p_job_id IN jobs.job_id%TYPE,
    p_job_title IN jobs.job_title%TYPE
)
AS
BEGIN
    INSERT INTO jobs (job_id, job_title)
    VALUES (p_job_id, p_job_title);
    DBMS_OUTPUT.PUT_LINE('Dodano nową pracę: ' || p_job_id || ' - ' || p_job_title);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/

-- 2. Modyfikacja Job_title w tabeli Jobs
CREATE OR REPLACE PROCEDURE update_job_title(
    p_job_id IN jobs.job_id%TYPE,
    p_new_title IN jobs.job_title%TYPE
)
AS
    licznik INTEGER;
BEGIN
    UPDATE jobs
    SET job_title = p_new_title
    WHERE job_id = p_job_id;
    licznik := SQL%ROWCOUNT;

    IF licznik = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie zaktualizowano żadnego rekordu.');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Zaktualizowano Job_title dla ID: ' || p_job_id);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/

-- 3. Usuwanie wiersza z tabeli Jobs
CREATE OR REPLACE PROCEDURE delete_job(
    p_job_id IN jobs.job_id%TYPE
)
AS
    licznik INTEGER;
BEGIN
    DELETE FROM jobs
    WHERE job_id = p_job_id;
    licznik := SQL%ROWCOUNT;

    IF licznik = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Nie usunięto żadnego rekordu.');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Usunięto Job o ID: ' || p_job_id);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/

-- 4. Wyciąganie zarobków i nazwiska z tabeli employees
CREATE OR REPLACE PROCEDURE get_salary_and_last_name(
    p_employee_id IN employees.employee_id%TYPE,
    p_salary OUT employees.salary%TYPE,
    p_last_name OUT employees.last_name%TYPE
)
AS
BEGIN
    SELECT salary, last_name INTO p_salary, p_last_name
    FROM employees
    WHERE employee_id = p_employee_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Pracownik o ID: ' || p_employee_id || ' nie istnieje.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/

-- 5. Dodawanie wiersza do tabeli employees
CREATE OR REPLACE PROCEDURE add_employee(
    p_salary IN employees.salary%TYPE
)
AS
BEGIN
    IF p_salary > 20000 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Wynagrodzenie nie może przekraczać 20000.');
    END IF;

    INSERT INTO employees (employee_id, first_name, last_name, salary, hire_date)
    VALUES (employees_seq.NEXTVAL, 'John', 'Doe', p_salary, SYSDATE);
    DBMS_OUTPUT.PUT_LINE('Dodano nowego pracownika.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/

-- 6. Obliczanie średniej zarobków dla menedżera
CREATE OR REPLACE PROCEDURE avg_salary_for_manager(
    p_manager_id IN employees.manager_id%TYPE,
    p_avg_salary OUT NUMBER
)
AS
BEGIN
    SELECT AVG(salary) INTO p_avg_salary
    FROM employees
    WHERE manager_id = p_manager_id;
    DBMS_OUTPUT.PUT_LINE('Średnia pensja podwładnych: ' || p_avg_salary);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Menedżer o ID: ' || p_manager_id || ' nie istnieje.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/

-- 7. Aktualizacja wynagrodzeń w departamencie
CREATE OR REPLACE PROCEDURE update_department_salary(
    p_department_id IN employees.department_id%TYPE,
    p_percent IN NUMBER
)
AS
BEGIN
    UPDATE employees e
    SET salary = salary * (1 + p_percent / 100)
    WHERE e.department_id = p_department_id
      AND EXISTS (
          SELECT 1
          FROM jobs j
          WHERE j.job_id = e.job_id
            AND e.salary * (1 + p_percent / 100) BETWEEN j.min_salary AND j.max_salary
      );

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'Nie zaktualizowano żadnych wynagrodzeń.');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Zaktualizowano wynagrodzenia w departamencie ' || p_department_id);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/

-- 8. Przenoszenie pracownika między departamentami
CREATE OR REPLACE PROCEDURE transfer_employee(
    p_employee_id IN employees.employee_id%TYPE,
    p_new_department_id IN employees.department_id%TYPE
)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM departments WHERE department_id = p_new_department_id) THEN
        RAISE_APPLICATION_ERROR(-20005, 'Nowy departament nie istnieje.');
    END IF;

    UPDATE employees
    SET department_id = p_new_department_id
    WHERE employee_id = p_employee_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'Pracownik o ID: ' || p_employee_id || ' nie istnieje.');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Przeniesiono pracownika ' || p_employee_id || ' do departamentu ' || p_new_department_id);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/

-- 9. Usuwanie departamentu bez przypisanych pracowników
CREATE OR REPLACE PROCEDURE delete_department(
    p_department_id IN departments.department_id%TYPE
)
AS
BEGIN
    DELETE FROM departments
    WHERE department_id = p_department_id
      AND NOT EXISTS (
          SELECT 1 FROM employees WHERE department_id = p_department_id
      );

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20007, 'Departament ma przypisanych pracowników lub nie istnieje.');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Usunięto departament o ID: ' || p_department_id);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END;
/
