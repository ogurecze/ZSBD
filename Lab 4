-- 1. Stwórz ranking pracowników oparty na wysokości pensji (RANK)
SELECT employee_id, last_name, salary,
       RANK() OVER (ORDER BY salary DESC) AS ranking
FROM employees;

-- 2. Dodaj kolumnę pokazującą całkowitą sumę pensji wszystkich pracowników
SELECT employee_id, last_name, salary,
       SUM(salary) OVER () AS total_salary
FROM employees;

-- 3. Wypisz: nazwisko, nazwę produktu, skumulowaną wartość sprzedaży, ranking
SELECT e.last_name, p.product_name,
       SUM(s.sales_amount) OVER (PARTITION BY e.employee_id) AS cumulative_sales,
       RANK() OVER (ORDER BY SUM(s.sales_amount) OVER () DESC) AS sales_ranking
FROM employees e
JOIN sales s ON e.employee_id = s.employee_id
JOIN products p ON s.product_id = p.product_id;

-- 4. Wiersze z tabeli sales z różnymi obliczeniami
SELECT e.last_name, p.product_name, p.price, 
       COUNT(*) OVER (PARTITION BY p.product_id, s.sale_date) AS daily_transactions,
       SUM(p.price * s.quantity) OVER (PARTITION BY p.product_id, s.sale_date) AS daily_total,
       LAG(p.price) OVER (PARTITION BY p.product_id ORDER BY s.sale_date) AS previous_price,
       LEAD(p.price) OVER (PARTITION BY p.product_id ORDER BY s.sale_date) AS next_price
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN employees e ON s.employee_id = e.employee_id;

-- 5. Wypisz sumy miesięczne oraz sumy rosnące
SELECT p.product_name, p.price,
       SUM(p.price * s.quantity) OVER (PARTITION BY TO_CHAR(s.sale_date, 'YYYY-MM')) AS monthly_total,
       SUM(SUM(p.price * s.quantity)) OVER (PARTITION BY p.product_name ORDER BY TO_CHAR(s.sale_date, 'YYYY-MM')) AS cumulative_monthly_total
FROM sales s
JOIN products p ON s.product_id = p.product_id;

-- 6. Porównanie cen z 2022 i 2023
SELECT p.product_name, c.category_name,
       MAX(CASE WHEN EXTRACT(YEAR FROM s.sale_date) = 2022 THEN p.price END) AS price_2022,
       MAX(CASE WHEN EXTRACT(YEAR FROM s.sale_date) = 2023 THEN p.price END) AS price_2023,
       ABS(MAX(CASE WHEN EXTRACT(YEAR FROM s.sale_date) = 2023 THEN p.price END) -
           MAX(CASE WHEN EXTRACT(YEAR FROM s.sale_date) = 2022 THEN p.price END)) AS price_difference
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN categories c ON p.category_id = c.category_id
GROUP BY p.product_name, c.category_name;

-- 7. Wiersze z minimalną, maksymalną ceną w kategorii
SELECT c.category_name, p.product_name, p.price,
       MIN(p.price) OVER (PARTITION BY c.category_name) AS min_price,
       MAX(p.price) OVER (PARTITION BY c.category_name) AS max_price,
       MAX(p.price) OVER (PARTITION BY c.category_name) -
       MIN(p.price) OVER (PARTITION BY c.category_name) AS price_difference
FROM products p
JOIN categories c ON p.category_id = c.category_id;

-- 8. Średnia krocząca ceny
SELECT p.product_name, 
       AVG(p.price) OVER (PARTITION BY p.product_id ORDER BY s.sale_date ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS moving_average_price
FROM sales s
JOIN products p ON s.product_id = p.product_id;

-- 9. Ranking cen w kategorii i numeracja
SELECT c.category_name, p.product_name, p.price,
       RANK() OVER (PARTITION BY c.category_name ORDER BY p.price DESC) AS price_rank,
       ROW_NUMBER() OVER (PARTITION BY c.category_name ORDER BY p.price DESC) AS row_number,
       DENSE_RANK() OVER (PARTITION BY c.category_name ORDER BY p.price DESC) AS dense_price_rank
FROM products p
JOIN categories c ON p.category_id = c.category_id;

-- 10. Rosnąca wartość sprzedaży i ranking
SELECT e.last_name, p.product_name, 
       SUM(p.price * s.quantity) OVER (PARTITION BY e.employee_id ORDER BY s.sale_date) AS cumulative_sales,
       RANK() OVER (ORDER BY p.price * s.quantity DESC) AS sales_ranking
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN employees e ON s.employee_id = e.employee_id;

-- 11. Pracownicy uczestniczący w sprzedaży (bez funkcji okienkowych)
SELECT DISTINCT e.first_name, e.last_name, e.job_title
FROM employees e
JOIN sales s ON e.employee_id = s.employee_id;
