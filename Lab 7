-- 1. Funkcja zwracająca nazwę pracy
CREATE OR REPLACE FUNCTION get_job_title(p_job_id IN jobs.job_id%TYPE)
RETURN jobs.job_title%TYPE
AS
    v_job_title jobs.job_title%TYPE;
BEGIN
    SELECT job_title INTO v_job_title
    FROM jobs
    WHERE job_id = p_job_id;

    RETURN v_job_title;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Praca o podanym ID nie istnieje.');
END;
/

-- 2. Funkcja zwracająca roczne zarobki
CREATE OR REPLACE FUNCTION calculate_annual_salary(p_employee_id IN employees.employee_id%TYPE)
RETURN NUMBER
AS
    v_salary employees.salary%TYPE;
    v_commission employees.commission_pct%TYPE;
BEGIN
    SELECT salary, NVL(commission_pct, 0) INTO v_salary, v_commission
    FROM employees
    WHERE employee_id = p_employee_id;

    RETURN (v_salary * 12) + (v_salary * v_commission);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Pracownik o podanym ID nie istnieje.');
END;
/

-- 3. Funkcja zwracająca numer kierunkowy
CREATE OR REPLACE FUNCTION extract_area_code(p_phone_number IN VARCHAR2)
RETURN VARCHAR2
AS
    v_area_code VARCHAR2(10);
BEGIN
    v_area_code := SUBSTR(p_phone_number, INSTR(p_phone_number, '(') + 1,
                           INSTR(p_phone_number, ')') - INSTR(p_phone_number, '(') - 1);

    RETURN v_area_code;
END;
/

-- 4. Funkcja zmieniająca pierwszą i ostatnią literę na wielką
CREATE OR REPLACE FUNCTION capitalize_first_last(p_input IN VARCHAR2)
RETURN VARCHAR2
AS
    v_result VARCHAR2(4000);
BEGIN
    v_result := INITCAP(SUBSTR(p_input, 1, 1)) ||
                LOWER(SUBSTR(p_input, 2, LENGTH(p_input) - 2)) ||
                UPPER(SUBSTR(p_input, -1));

    RETURN v_result;
END;
/

-- 5. Funkcja przekształcająca PESEL na datę urodzenia
CREATE OR REPLACE FUNCTION pesel_to_date(p_pesel IN VARCHAR2)
RETURN DATE
AS
    v_year NUMBER;
    v_month NUMBER;
    v_day NUMBER;
BEGIN
    v_year := TO_NUMBER(SUBSTR(p_pesel, 1, 2));
    v_month := TO_NUMBER(SUBSTR(p_pesel, 3, 2));
    v_day := TO_NUMBER(SUBSTR(p_pesel, 5, 2));

    IF v_month > 20 THEN
        v_year := 2000 + v_year;
        v_month := v_month - 20;
    ELSE
        v_year := 1900 + v_year;
    END IF;

    RETURN TO_DATE(v_year || '-' || v_month || '-' || v_day, 'YYYY-MM-DD');
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Nieprawidłowy PESEL.');
END;
/

-- 6. Funkcja zwracająca liczbę pracowników i departamentów w kraju
CREATE OR REPLACE FUNCTION employees_and_departments_in_country(p_country_name IN VARCHAR2)
RETURN VARCHAR2
AS
    v_employee_count NUMBER;
    v_department_count NUMBER;
BEGIN
    SELECT COUNT(DISTINCT e.employee_id), COUNT(DISTINCT d.department_id)
    INTO v_employee_count, v_department_count
    FROM countries c
    JOIN locations l ON c.country_id = l.country_id
    JOIN departments d ON l.location_id = d.location_id
    JOIN employees e ON d.department_id = e.department_id
    WHERE c.country_name = p_country_name;

    RETURN 'Pracownicy: ' || v_employee_count || ', Departamenty: ' || v_department_count;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20004, 'Brak danych dla podanego kraju.');
END;
/

-- 7. Funkcja generująca unikalny identyfikator dostępu
CREATE OR REPLACE FUNCTION generate_access_id(
    p_last_name IN employees.last_name%TYPE,
    p_phone_number IN employees.phone_number%TYPE,
    p_first_name IN employees.first_name%TYPE
)
RETURN VARCHAR2
AS
    v_id VARCHAR2(20);
BEGIN
    v_id := UPPER(SUBSTR(p_last_name, 1, 3)) ||
            SUBSTR(p_phone_number, -4) ||
            UPPER(SUBSTR(p_first_name, 1, 1));

    RETURN v_id;
END;
/
