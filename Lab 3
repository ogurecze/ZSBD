-- 1. Utwórz widok v_wysokie_pensje dla pracowników zarabiających więcej niż 6000
CREATE VIEW v_wysokie_pensje AS
SELECT *
FROM employees
WHERE salary > 6000;

-- 2. Zmień definicję widoku v_wysokie_pensje na pracowników zarabiających powyżej 12000
CREATE OR REPLACE VIEW v_wysokie_pensje AS
SELECT *
FROM employees
WHERE salary > 12000;

-- 3. Usuń widok v_wysokie_pensje
DROP VIEW v_wysokie_pensje;

-- 4. Stwórz widok dla tabeli employees z pracownikami z działu Finance
CREATE VIEW v_pracownicy_finance AS
SELECT employee_id, last_name, first_name
FROM employees
WHERE department_id = (
    SELECT department_id
    FROM departments
    WHERE department_name = 'Finance'
);

-- 5. Stwórz widok dla pracowników z zarobkami pomiędzy 5000 a 12000
CREATE VIEW v_pracownicy_5k_12k AS
SELECT employee_id, last_name, first_name, salary, job_id, email, hire_date
FROM employees
WHERE salary BETWEEN 5000 AND 12000;

-- 6. Sprawdź, czy możesz dodawać, edytować i usuwać dane przez widoki
-- Próba dodania nowego pracownika przez v_pracownicy_5k_12k
INSERT INTO v_pracownicy_5k_12k (employee_id, last_name, first_name, salary, job_id, email, hire_date)
VALUES (999, 'Nowak', 'Jan', 7000, 'DEV', 'j.nowak@example.com', SYSDATE);

-- Próba edycji pracownika
UPDATE v_pracownicy_5k_12k
SET salary = 8000
WHERE employee_id = 999;

-- Próba usunięcia pracownika
DELETE FROM v_pracownicy_5k_12k
WHERE employee_id = 999;

-- 7. Widok dla działów z co najmniej 4 pracownikami
CREATE VIEW v_statystyki_dzialow AS
SELECT d.department_id, d.department_name,
       COUNT(e.employee_id) AS liczba_pracownikow,
       AVG(e.salary) AS srednia_pensja,
       MAX(e.salary) AS najwyzsza_pensja
FROM departments d
JOIN employees e ON d.department_id = e.department_id
GROUP BY d.department_id, d.department_name
HAVING COUNT(e.employee_id) >= 4;

-- Próba dodania danych do widoku
INSERT INTO v_statystyki_dzialow (department_id, department_name)
VALUES (999, 'Test Department');

-- 8. Utwórz widok z warunkiem WITH CHECK OPTION
CREATE OR REPLACE VIEW v_pracownicy_5k_12k_check AS
SELECT employee_id, last_name, first_name, salary, job_id, email, hire_date
FROM employees
WHERE salary BETWEEN 5000 AND 12000
WITH CHECK OPTION;

-- Próba dodania pracownika z zarobkami pomiędzy 5000 a 12000
INSERT INTO v_pracownicy_5k_12k_check (employee_id, last_name, first_name, salary, job_id, email, hire_date)
VALUES (998, 'Kowalski', 'Piotr', 11000, 'HR', 'p.kowalski@example.com', SYSDATE);

-- Próba dodania pracownika z zarobkami powyżej 12000
INSERT INTO v_pracownicy_5k_12k_check (employee_id, last_name, first_name, salary, job_id, email, hire_date)
VALUES (997, 'Wiśniewski', 'Andrzej', 13000, 'FIN', 'a.wisniewski@example.com', SYSDATE);

-- 9. Utwórz widok zmaterializowany v_managerowie
CREATE MATERIALIZED VIEW v_managerowie AS
SELECT e.employee_id, e.last_name, e.first_name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
WHERE e.employee_id IN (SELECT DISTINCT manager_id FROM employees);

-- 10. Stwórz widok v_najlepiej_oplacani
CREATE VIEW v_najlepiej_oplacani AS
SELECT *
FROM employees
ORDER BY salary DESC
FETCH FIRST 10 ROWS ONLY;
